/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VotingContractNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createVoting"
      | "endVoting"
      | "getWinner"
      | "nftContract"
      | "owner"
      | "vote"
      | "votingCount"
      | "votings"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createVoting",
    values: [string, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votings",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endVoting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votings", data: BytesLike): Result;
}

export interface VotingContractNFT extends BaseContract {
  connect(runner?: ContractRunner | null): VotingContractNFT;
  waitForDeployment(): Promise<this>;

  interface: VotingContractNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createVoting: TypedContractMethod<
    [_title: string, _options: string[], _durationSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  endVoting: TypedContractMethod<
    [_votingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getWinner: TypedContractMethod<
    [_votingId: BigNumberish],
    [[string, bigint] & { winner: string; votes: bigint }],
    "view"
  >;

  nftContract: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  vote: TypedContractMethod<
    [_votingId: BigNumberish, _optionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  votingCount: TypedContractMethod<[], [bigint], "view">;

  votings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean, bigint] & {
        title: string;
        startTime: bigint;
        endTime: bigint;
        active: boolean;
        optionsCount: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createVoting"
  ): TypedContractMethod<
    [_title: string, _options: string[], _durationSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endVoting"
  ): TypedContractMethod<[_votingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getWinner"
  ): TypedContractMethod<
    [_votingId: BigNumberish],
    [[string, bigint] & { winner: string; votes: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "nftContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_votingId: BigNumberish, _optionId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean, bigint] & {
        title: string;
        startTime: bigint;
        endTime: bigint;
        active: boolean;
        optionsCount: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
